[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"

[project]
name = "eva_guarani"
version = "8.2.0"
description = "EVA & GUARANI - Quantum Unified System"
readme = "README.md"
authors = [
  { name="EVA & GUARANI", email="enioxt@gmail.com" },
]
license = { file="LICENSE" }
classifiers = [
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Intended Audience :: Developers",
    "Framework :: Pytest",
]
dependencies = [
    "pyyaml>=6.0.1",
    "colorama>=0.4.6",
    "rich>=13.7.0",
    # "langdetect>=1.0.9", # Temporarily removed
    "argparse>=1.4.0",
    "requests>=2.31.0",
    "python-dotenv>=1.0.0",
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "networkx>=3.2.1",
    "matplotlib>=3.8.0",
    "tqdm>=4.66.1",
    # Development & Code Quality
    "black",
    "ruff",
    "pre-commit",
    "pytest-asyncio"
]
requires-python = ">=3.9"

[project.optional-dependencies]
dev = [
    "pytest",
    "pytest-cov",
    "black",
    "ruff",
    "pre-commit",
    "mypy", # Optional: Add mypy for static type checking
]

[project.urls]
Homepage = "https://github.com/enioxt/EVA-e-Guarani-EGOS"
Issues = "https://github.com/enioxt/EVA-e-Guarani-EGOS/issues"

[tool.setuptools.packages.find]
where = ["."]  # Look for packages in the current directory
include = ["subsystems*", "scripts*", "examples*"] # Include top-level packages
exclude = ["tests*", "*.tests", "*.tests.*", "tests.*"] # Exclude tests

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --cov=subsystems --cov-report=html --cov-report=term"
testpaths = [
    "subsystems", # Run tests within all subsystems
]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
# asyncio_mode = "auto" # For pytest-asyncio if needed

[tool.coverage.run]
source = ["subsystems"] # Source for coverage analysis
omit = ["*/tests/*", "*__init__.py", "*/config/*", "*/sandbox/*"] # Omit tests, inits, configs, sandbox

[tool.coverage.report]
# Report settings (optional)
show_missing = true
fail_under = 70 # Optional: Fail if coverage is below 70%

[tool.black]
line-length = 100
target-version = ["py39"]

[tool.ruff]
# Enable Pyflakes (F), pycodestyle (E, W), isort (I) errors/warnings.
select = ["E", "F", "W", "I"]
ignore = []
# Allow unused variables in __init__.py
# ignore-init-module-imports = true # Often needed, but let's see if ruff handles it
# Set line length
line-length = 100
# Exclude paths
exclude = [
    ".git",
    ".pytest_cache",
    ".venv",
    "venv",
    "build",
    "dist",
    "logs",
    "backups",
    "htmlcov",
    "experiments",
    "examples/sandbox", # Exclude sandbox specifically
    "Researchs",
    "docs/historical_changelogs",
    "external",  # Ignore entire external directory
    ".cursor",   # Ignore cursor directory
    ".obsidian", # Ignore obsidian directory
    ".roo",      # Ignore roo directory
    ".benchmarks",# Ignore benchmark directory
    # Add specific files to ignore if needed
    "WhatsApp Chat with Mensagens Enio.txt",
    "openrouter_mcp_implementation_plan.md",
    "migration_plan.md",
    "ai_translation_log.txt"
]

[tool.ruff.isort]
known-first-party = ["subsystems", "scripts", "examples"]

[tool.mypy]
# Optional mypy configuration
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
ignore_missing_imports = true # Start with this, can tighten later
exclude = ['venv', '.venv', 'build', 'dist', 'logs', 'backups', 'htmlcov', 'experiments', 'examples']
