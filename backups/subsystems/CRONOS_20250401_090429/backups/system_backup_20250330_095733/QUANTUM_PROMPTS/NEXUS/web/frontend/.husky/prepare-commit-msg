#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

COMMIT_MSG_FILE=$1
COMMIT_SOURCE=$2
SHA1=$3

# Function to display commit message template
display_template() {
  echo "${YELLOW}Commit Message Format:${NC}"
  echo "${GREEN}<type>(<scope>): <subject>${NC}"
  echo ""
  echo "${YELLOW}Types:${NC}"
  echo "feat     ➜ A new feature"
  echo "fix      ➜ A bug fix"
  echo "docs     ➜ Documentation changes"
  echo "style    ➜ Code style changes (formatting, etc)"
  echo "refactor ➜ Code refactoring"
  echo "perf     ➜ Performance improvements"
  echo "test     ➜ Adding or modifying tests"
  echo "chore    ➜ Build process or auxiliary tool changes"
  echo ""
  echo "${YELLOW}Example:${NC}"
  echo "feat(auth): add OAuth2 authentication"
  echo ""
}

# Only add template if this is a commit without message (not from merge, amend, etc)
if [ -z "$COMMIT_SOURCE" ]; then
  # Display the template
  display_template

  # Get the current branch name
  BRANCH_NAME=$(git symbolic-ref --short HEAD)

  # Extract type and scope from branch name if it follows convention
  if echo "$BRANCH_NAME" | grep -qE "^(feature|bugfix|hotfix|release|chore)/"; then
    TYPE=$(echo "$BRANCH_NAME" | cut -d'/' -f1)
    SCOPE=$(echo "$BRANCH_NAME" | cut -d'/' -f2)

    # Convert branch type to commit type
    case "$TYPE" in
      "feature") TYPE="feat" ;;
      "bugfix") TYPE="fix" ;;
      "hotfix") TYPE="fix" ;;
      "release") TYPE="chore" ;;
      "chore") TYPE="chore" ;;
    esac

    # Create template based on branch name
    TEMPLATE="$TYPE($SCOPE): "

    # Only prepend template if commit message doesn't already have one
    if ! grep -qE "^(feat|fix|docs|style|refactor|perf|test|chore)\([a-z0-9-]+\): " "$COMMIT_MSG_FILE"; then
      echo "$TEMPLATE" > "$COMMIT_MSG_FILE.tmp"
      cat "$COMMIT_MSG_FILE" >> "$COMMIT_MSG_FILE.tmp"
      mv "$COMMIT_MSG_FILE.tmp" "$COMMIT_MSG_FILE"
    fi
  fi
fi
