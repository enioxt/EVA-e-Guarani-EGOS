#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

echo "${YELLOW}üîç Validando mensagem do commit...${NC}"

# Regex para validar o formato da mensagem
# Formato: <type>(<scope>): <subject>
# Types: feat, fix, docs, style, refactor, test, chore, perf, ci, build, revert
# Scope: opcional, nome do m√≥dulo afetado
# Subject: descri√ß√£o curta da mudan√ßa
commit_regex='^(feat|fix|docs|style|refactor|test|chore|perf|ci|build|revert)(\([a-z-]+\))?: .{1,50}$'

# Pega a mensagem do commit
commit_msg=$(cat "$1")

# Valida o formato da mensagem
if ! echo "$commit_msg" | grep -qE "$commit_regex"; then
  echo "${RED}‚ùå Formato inv√°lido da mensagem de commit.${NC}"
  echo "${YELLOW}O formato deve ser: <type>(<scope>): <subject>${NC}"
  echo "${YELLOW}Types v√°lidos: feat, fix, docs, style, refactor, test, chore, perf, ci, build, revert${NC}"
  echo "${YELLOW}Exemplos:${NC}"
  echo "  feat(auth): add login with Google"
  echo "  fix(api): handle null response"
  echo "  docs: update README"
  exit 1
fi

# Valida o tamanho da mensagem
if [ ${#commit_msg} -gt 50 ]; then
  echo "${RED}‚ùå Mensagem muito longa (m√°ximo 50 caracteres).${NC}"
  exit 1
fi

echo "${GREEN}‚úÖ Mensagem de commit v√°lida!${NC}"
