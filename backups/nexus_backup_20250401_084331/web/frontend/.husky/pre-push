#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

echo "${YELLOW}üîç Running pre-push checks...${NC}"

# Run type checking
echo "${YELLOW}üìù Running type checks...${NC}"
npm run type-check || {
  echo "${RED}‚ùå Type checking failed. Please fix type errors before pushing.${NC}"
  exit 1
}

# Run linting
echo "${YELLOW}üîç Running linter...${NC}"
npm run lint || {
  echo "${RED}‚ùå Linting failed. Please fix linting errors before pushing.${NC}"
  exit 1
}

# Run tests
echo "${YELLOW}üß™ Running test suite...${NC}"
npm run test || {
  echo "${RED}‚ùå Tests failed. Please fix failing tests before pushing.${NC}"
  exit 1
}

# Run build
echo "${YELLOW}üèóÔ∏è Running build...${NC}"
npm run build || {
  echo "${RED}‚ùå Build failed. Please fix build errors before pushing.${NC}"
  exit 1
}

# Check for sensitive data
echo "${YELLOW}üîê Checking for sensitive data...${NC}"
if git diff --cached --name-only | xargs grep -l "API_KEY\|SECRET\|PASSWORD\|TOKEN" > /dev/null; then
  echo "${RED}‚ùå Potential sensitive data detected in commits. Please remove before pushing.${NC}"
  exit 1
fi

# Check branch naming convention
BRANCH_NAME=$(git symbolic-ref --short HEAD)
BRANCH_REGEX="^(feature|bugfix|hotfix|release|chore)\/[a-z0-9-]+$"

if ! echo "$BRANCH_NAME" | grep -qE "$BRANCH_REGEX"; then
  echo "${RED}‚ùå Branch name '$BRANCH_NAME' does not follow the convention:${NC}"
  echo "${YELLOW}   - feature/feature-name${NC}"
  echo "${YELLOW}   - bugfix/bug-description${NC}"
  echo "${YELLOW}   - hotfix/issue-description${NC}"
  echo "${YELLOW}   - release/version${NC}"
  echo "${YELLOW}   - chore/task-description${NC}"
  exit 1
fi

# Check for large files (>5MB)
MAX_SIZE=$((5 * 1024 * 1024)) # 5MB in bytes
git diff --cached --name-only | while read -r file; do
  if [ -f "$file" ]; then
    size=$(stat -f%z "$file" 2>/dev/null || stat -c%s "$file" 2>/dev/null)
    if [ "$size" -gt "$MAX_SIZE" ]; then
      echo "${RED}‚ùå File '$file' is too large ($size bytes). Maximum allowed size is $MAX_SIZE bytes.${NC}"
      exit 1
    fi
  fi
done

echo "${GREEN}‚úÖ All pre-push checks passed successfully!${NC}" 