#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

echo "${YELLOW}üîç Running pre-commit checks...${NC}"

# Get staged files
STAGED_FILES=$(git diff --cached --name-only --diff-filter=d | grep -E '\.(ts|tsx|js|jsx)$')

if [ -z "$STAGED_FILES" ]; then
  echo "${YELLOW}No JavaScript/TypeScript files to validate.${NC}"
  exit 0
fi

# Run Prettier on staged files
echo "${YELLOW}üíÖ Running Prettier...${NC}"
echo "$STAGED_FILES" | xargs npx prettier --write || {
  echo "${RED}‚ùå Prettier formatting failed. Please fix formatting issues.${NC}"
  exit 1
}

# Run ESLint on staged files
echo "${YELLOW}üîç Running ESLint...${NC}"
echo "$STAGED_FILES" | xargs npx eslint --fix || {
  echo "${RED}‚ùå ESLint check failed. Please fix linting issues.${NC}"
  exit 1
}

# Run TypeScript type checking
echo "${YELLOW}üìù Running type checks...${NC}"
npm run type-check || {
  echo "${RED}‚ùå Type checking failed. Please fix type errors.${NC}"
  exit 1
}

# Check for console.log statements
echo "${YELLOW}üîç Checking for console.log statements...${NC}"
if echo "$STAGED_FILES" | xargs grep -l "console.log" > /dev/null; then
  echo "${RED}‚ùå console.log statements detected. Please remove them before committing.${NC}"
  exit 1
fi

# Check for debugger statements
echo "${YELLOW}üîç Checking for debugger statements...${NC}"
if echo "$STAGED_FILES" | xargs grep -l "debugger" > /dev/null; then
  echo "${RED}‚ùå debugger statements detected. Please remove them before committing.${NC}"
  exit 1
fi

# Check for TODO comments without issue numbers
echo "${YELLOW}üìù Checking TODO comments...${NC}"
if echo "$STAGED_FILES" | xargs grep -l "TODO:" | grep -v "TODO: #[0-9]" > /dev/null; then
  echo "${RED}‚ùå TODO comments without issue numbers detected. Please add issue numbers (e.g., TODO: #123).${NC}"
  exit 1
fi

# Check file size (prevent large files)
echo "${YELLOW}üìè Checking file sizes...${NC}"
MAX_SIZE=$((500 * 1024)) # 500KB in bytes
for file in $STAGED_FILES; do
  if [ -f "$file" ]; then
    size=$(stat -f%z "$file" 2>/dev/null || stat -c%s "$file" 2>/dev/null)
    if [ "$size" -gt "$MAX_SIZE" ]; then
      echo "${RED}‚ùå File '$file' is too large ($size bytes). Maximum allowed size is $MAX_SIZE bytes.${NC}"
      exit 1
    fi
  fi
done

# Add back the formatted files
echo "$STAGED_FILES" | xargs git add

echo "${GREEN}‚úÖ All pre-commit checks passed successfully!${NC}" 