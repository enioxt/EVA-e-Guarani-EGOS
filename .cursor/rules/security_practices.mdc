---
description: Security best practices and standards for EGOS development
globs: ["**/*.py", "**/*.md", "**/*.js", "**/*.html"]
alwaysApply: true
---
# Security Practices (KOIOS Standard)

## Rule

All EGOS code and systems must adhere to these security principles:

1. **Authentication & Authorization**
   - Implement proper authentication for all access points
   - Use role-based access control (RBAC) for authorization
   - Never store credentials in code or plain text

2. **Data Protection**
   - Use encryption for sensitive data at rest and in transit
   - Implement proper input validation for all user inputs
   - Sanitize all outputs to prevent injection attacks
   - Never log sensitive information (passwords, tokens, personal data)
   - **Avoid `pickle`:** Never deserialize data from untrusted sources using `pickle`, as it can lead to arbitrary code execution. Prefer safer formats like JSON for data exchange.

3. **Dependency Management**
   - Use only approved, regularly updated dependencies
   - Regularly scan for and patch vulnerabilities
   - Pin dependency versions to prevent supply chain attacks

4. **Code Security**
   - Follow the principle of least privilege
   - Avoid security anti-patterns (e.g., hardcoded secrets)
   - Implement proper error handling that doesn't expose sensitive information
   - Use secure random number generation

5. **Testing & Verification**
   - Implement security tests alongside functional tests
   - Run static analysis tools to identify security issues
   - Conduct regular code reviews with security focus

## Rationale

Security is a foundational aspect of the EGOS system. These practices ensure the confidentiality, integrity, and availability of data and services while protecting users and the system itself from malicious actors. Avoiding insecure deserialization methods like `pickle` with untrusted data is critical to prevent remote code execution vulnerabilities.

## Examples

### Correct Usage

```python
import os
import secrets
from typing import Dict, Optional

from cryptography.fernet import Fernet
from koios.logger import KoiosLogger
from koios.validators import validate_input

logger = KoiosLogger.get_logger("SUBSYSTEM.SecurityModule")

def generate_api_key() -> str:
    """Generate a secure API key using cryptographically strong random numbers.

    Returns:
        A secure random API key as a string
    """
    return secrets.token_urlsafe(32)

def encrypt_sensitive_data(data: str, key: Optional[bytes] = None) -> Dict[str, str]:
    """Encrypt sensitive data using Fernet symmetric encryption.

    Args:
        data: The sensitive data to encrypt
        key: Optional encryption key, generated if not provided

    Returns:
        Dictionary containing the encrypted data and key
    """
    if not key:
        key = Fernet.generate_key()

    f = Fernet(key)
    encrypted_data = f.encrypt(data.encode())

    return {
        "encrypted_data": encrypted_data.decode(),
        "key": key.decode()
    }

def process_user_input(user_input: str) -> str:
    """Process and validate user input.

    Args:
        user_input: The input from the user

    Returns:
        Validated and processed input

    Raises:
        ValueError: If input validation fails
    """
    # Validate input before processing
    validated_input = validate_input(user_input)
    if not validated_input:
        logger.warning(f"Invalid input received: {user_input[:10]}...")
        raise ValueError("Invalid input provided")

    # Process the validated input
    result = do_something_with_input(validated_input)

    # Log success without exposing the full input
    logger.info("Successfully processed user input")

    return result
```

### Incorrect Usage

```python
import random
import hashlib

API_KEY = "hardcoded_secret_key_12345"  # WRONG: Hardcoded secret

def generate_api_key():  # WRONG: Uses weak random, no type hints
    """Generate API key."""
    return str(random.randint(10000, 99999))  # WRONG: Not cryptographically secure

def encrypt_password(password):  # WRONG: No type hints, weak encryption
    """Hash a password with MD5."""
    return hashlib.md5(password.encode()).hexdigest()  # WRONG: MD5 is not secure for passwords

def process_user_data(user_input):  # WRONG: No type hints, no validation
    # WRONG: No input validation
    query = f"SELECT * FROM users WHERE username = '{user_input}'"  # WRONG: SQL injection vulnerability

    # WRONG: Logging sensitive information
    print(f"Executing query with user input: {user_input}")

    # WRONG: No error handling
    return execute_query(query)
```

### Incorrect Usage (Serialization Example)

```python
import pickle
import base64

def deserialize_user_data(encoded_data: str):
    # WRONG: Deserializing directly from potentially untrusted input using pickle
    # This allows arbitrary code execution if encoded_data is malicious
    user_data = pickle.loads(base64.b64decode(encoded_data))
    # ... process user_data ...
    return user_data

# CORRECTED approach (using JSON, a safer format):
# import json
# def deserialize_user_data_safe(json_string: str):
#     # Use JSON which is safer for untrusted data
#     user_data = json.loads(json_string)
#     # ... process user_data ...
#     return user_data
```

**All EGOS development must adhere to these security practices to ensure the confidentiality, integrity, and availability of data and services. Security is not a feature but a foundational requirement.**
