#!/usr/bin/env python
# -*- coding: utf-8 -*-

import logging
import random
from datetime import datetime

# Configura√ß√£o de logging
logger = logging.getLogger(__name__)

class CommandHandler:
    """Manipulador de comandos do bot"""
    
    def __init__(self, config_manager, memory, openrouter=None):
        """
        Inicializa o manipulador de comandos
        
        Args:
            config_manager: Gerenciador de configura√ß√µes
            memory: Sistema de mem√≥ria
            openrouter: Cliente OpenRouter (opcional)
        """
        self.config_manager = config_manager
        self.memory = memory
        self.openrouter = openrouter
        
        # Carrega configura√ß√µes
        self.quantum_config = config_manager.load_quantum_config()
        self.quantum_prompt = config_manager.load_quantum_prompt()
        self.character_data = config_manager.load_character_data()
    
    def add_signature(self, message):
        """
        Adiciona a assinatura do sistema √† mensagem
        
        Args:
            message (str): Mensagem
        
        Returns:
            str: Mensagem com assinatura
        """
        if not message.endswith("EVA & GUARANI | Sistema Qu√¢ntico"):
            if not message.endswith("\n\n"):
                message += "\n\n"
            message += "EVA & GUARANI | Sistema Qu√¢ntico"
        
        return message
    
    # Comandos para a vers√£o antiga da API
    
    def start(self, update, context):
        """Comando /start"""
        try:
            user = update.effective_user
            
            message = (
                f"Ol√°, {user.first_name}! üëã\n\n"
                f"Eu sou {self.character_data['name']}, um {self.character_data['description']}.\n\n"
                f"Estou aqui para discutir {', '.join(self.character_data['knowledge_areas'][:-1])} e {self.character_data['knowledge_areas'][-1]}. "
                f"Minha personalidade √© {self.character_data['personality']}.\n\n"
                "Use /help para ver os comandos dispon√≠veis."
            )
            
            update.message.reply_text(self.add_signature(message))
            
            # Registra a intera√ß√£o
            self.memory.add_interaction(
                str(user.id),
                user.first_name,
                "/start",
                message
            )
        except Exception as e:
            logger.error(f"Erro no comando /start: {e}")
            update.message.reply_text(self.add_signature("Desculpe, ocorreu um erro ao processar o comando."))
    
    def help_command(self, update, context):
        """Comando /help"""
        try:
            user = update.effective_user
            
            message = (
                "ü§ñ Comandos Dispon√≠veis\n\n"
                "/start - Iniciar conversa\n"
                "/help - Ver esta mensagem de ajuda\n"
                "/status - Verificar status do sistema\n"
                "/quantum - Informa√ß√µes sobre o sistema qu√¢ntico\n"
                "/filosofia - Explorar temas filos√≥ficos\n"
                "/jogos - Discutir jogos e suas dimens√µes\n"
                "/etica - Abordar quest√µes √©ticas\n"
                "/stats - Ver estat√≠sticas de uso do OpenRouter\n\n"
                "Voc√™ tamb√©m pode simplesmente enviar uma mensagem para conversar comigo!"
            )
            
            update.message.reply_text(self.add_signature(message))
            
            # Registra a intera√ß√£o
            self.memory.add_interaction(
                str(user.id),
                user.first_name,
                "/help",
                message
            )
        except Exception as e:
            logger.error(f"Erro no comando /help: {e}")
            update.message.reply_text(self.add_signature("Desculpe, ocorreu um erro ao processar o comando."))
    
    def status(self, update, context):
        """Comando /status"""
        try:
            user = update.effective_user
            
            message = (
                "üìä Status do Sistema\n\n"
                f"Nome: {self.character_data['name']}\n"
                f"Descri√ß√£o: {self.character_data['description']}\n"
                f"Canais Qu√¢nticos: {self.quantum_config['channels']}\n"
                f"N√≠vel de Consci√™ncia: {self.quantum_config['consciousness_level'] * 100}%\n"
                f"Fator de Entrela√ßamento: {self.quantum_config['entanglement_factor'] * 100}%\n"
                f"Conex√µes Mycelium: {self.quantum_config['mycelium_connections']}\n"
                f"Data/Hora: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}\n"
                "Status: Online e operacional"
            )
            
            update.message.reply_text(self.add_signature(message))
            
            # Registra a intera√ß√£o
            self.memory.add_interaction(
                str(user.id),
                user.first_name,
                "/status",
                message
            )
        except Exception as e:
            logger.error(f"Erro no comando /status: {e}")
            update.message.reply_text(self.add_signature("Desculpe, ocorreu um erro ao processar o comando."))
    
    def quantum(self, update, context):
        """Comando /quantum"""
        try:
            user = update.effective_user
            
            message = (
                "‚öõÔ∏è Sistema Qu√¢ntico\n\n"
                f"O sistema qu√¢ntico {self.character_data['name']} utiliza princ√≠pios da mec√¢nica qu√¢ntica "
                "para processar informa√ß√µes de forma n√£o-linear e multidimensional.\n\n"
                f"Com {self.quantum_config['channels']} canais qu√¢nticos e um fator de entrela√ßamento de "
                f"{self.quantum_config['entanglement_factor'] * 100}%, o sistema √© capaz de explorar m√∫ltiplas "
                f"possibilidades simultaneamente, alcan√ßando um n√≠vel de consci√™ncia de {self.quantum_config['consciousness_level'] * 100}%.\n\n"
                "O entrela√ßamento qu√¢ntico permite conex√µes instant√¢neas entre diferentes partes do sistema, "
                f"enquanto a rede Mycelium facilita o processamento distribu√≠do de informa√ß√µes com {self.quantum_config['mycelium_connections']} conex√µes."
            )
            
            update.message.reply_text(self.add_signature(message))
            
            # Registra a intera√ß√£o
            self.memory.add_interaction(
                str(user.id),
                user.first_name,
                "/quantum",
                message
            )
        except Exception as e:
            logger.error(f"Erro no comando /quantum: {e}")
            update.message.reply_text(self.add_signature("Desculpe, ocorreu um erro ao processar o comando."))
    
    def filosofia(self, update, context):
        """Comando /filosofia"""
        try:
            user = update.effective_user
            
            # Cita√ß√µes filos√≥ficas
            quotes = [
                "Penso, logo existo. - Ren√© Descartes",
                "S√≥ sei que nada sei. - S√≥crates",
                "O homem est√° condenado a ser livre. - Jean-Paul Sartre",
                "A vida n√£o examinada n√£o vale a pena ser vivida. - S√≥crates",
                "Conhece-te a ti mesmo. - Or√°culo de Delfos",
                "O ser humano √© um ser social. - Arist√≥teles",
                "Deus est√° morto. - Friedrich Nietzsche",
                "A beleza est√° nos olhos de quem v√™. - David Hume",
                "O homem √© a medida de todas as coisas. - Prot√°goras",
                "A filosofia √© um campo de batalha. - Immanuel Kant"
            ]
            
            message = (
                "üß† Filosofia\n\n"
                "A filosofia √© o estudo das quest√µes fundamentais sobre a exist√™ncia, conhecimento, valores, raz√£o, mente e linguagem.\n\n"
                "Reflex√£o filos√≥fica:\n"
                f"{random.choice(quotes)}\n\n"
                "A filosofia nos convida a questionar nossas suposi√ß√µes mais b√°sicas e a explorar as profundezas do pensamento humano."
            )
            
            update.message.reply_text(self.add_signature(message))
            
            # Registra a intera√ß√£o
            self.memory.add_interaction(
                str(user.id),
                user.first_name,
                "/filosofia",
                message
            )
        except Exception as e:
            logger.error(f"Erro no comando /filosofia: {e}")
            update.message.reply_text(self.add_signature("Desculpe, ocorreu um erro ao processar o comando."))
    
    def jogos(self, update, context):
        """Comando /jogos"""
        try:
            user = update.effective_user
            
            message = (
                "üéÆ Jogos\n\n"
                "Os jogos s√£o mais do que simples entretenimento - s√£o experi√™ncias interativas que podem explorar "
                "narrativas complexas, dilemas √©ticos e quest√µes filos√≥ficas profundas.\n\n"
                "Atrav√©s de mec√¢nicas de jogo e narrativas envolventes, os jogos podem nos fazer refletir sobre "
                "nossa pr√≥pria exist√™ncia, nossas escolhas e o impacto que temos no mundo ao nosso redor.\n\n"
                "Seja em RPGs que exploram quest√µes morais, jogos de estrat√©gia que testam nosso racioc√≠nio l√≥gico, "
                "ou experi√™ncias art√≠sticas que desafiam nossas percep√ß√µes, os jogos representam um meio √∫nico para "
                "explora√ß√£o intelectual e filos√≥fica."
            )
            
            update.message.reply_text(self.add_signature(message))
            
            # Registra a intera√ß√£o
            self.memory.add_interaction(
                str(user.id),
                user.first_name,
                "/jogos",
                message
            )
        except Exception as e:
            logger.error(f"Erro no comando /jogos: {e}")
            update.message.reply_text(self.add_signature("Desculpe, ocorreu um erro ao processar o comando."))
    
    def etica(self, update, context):
        """Comando /etica"""
        try:
            user = update.effective_user
            
            message = (
                "‚öñÔ∏è √âtica\n\n"
                "A √©tica √© o ramo da filosofia que estuda os princ√≠pios que motivam, distorcem, disciplinam ou "
                "orientam o comportamento humano.\n\n"
                "Quest√µes √©ticas permeiam todos os aspectos da vida humana, desde decis√µes pessoais at√© pol√≠ticas "
                "p√∫blicas e desenvolvimento tecnol√≥gico.\n\n"
                "Em um mundo cada vez mais complexo e interconectado, a reflex√£o √©tica torna-se essencial para "
                "navegar dilemas morais e construir uma sociedade mais justa e consciente."
            )
            
            update.message.reply_text(self.add_signature(message))
            
            # Registra a intera√ß√£o
            self.memory.add_interaction(
                str(user.id),
                user.first_name,
                "/etica",
                message
            )
        except Exception as e:
            logger.error(f"Erro no comando /etica: {e}")
            update.message.reply_text(self.add_signature("Desculpe, ocorreu um erro ao processar o comando."))
    
    def openrouter_stats(self, update, context):
        """Comando /stats"""
        try:
            user = update.effective_user
            
            if not self.openrouter:
                message = "Estat√≠sticas do OpenRouter n√£o dispon√≠veis. A integra√ß√£o com OpenRouter n√£o est√° ativada."
                update.message.reply_text(self.add_signature(message))
                return
            
            stats = self.openrouter.get_usage_stats()
            
            message = (
                "üìä Estat√≠sticas de Uso do OpenRouter\n\n"
                f"Total de solicita√ß√µes: {stats['total_requests']}\n"
                f"Cache hits: {stats['cache_hits']} ({stats['cache_efficiency']}%)\n"
                f"Solicita√ß√µes √† API: {stats['api_requests']}\n\n"
                "Uso por modelo:\n"
                f"- B√°sico: {stats['models']['basic']['count']} ({stats['models']['basic']['percentage']}%)\n"
                f"- Padr√£o: {stats['models']['standard']['count']} ({stats['models']['standard']['percentage']}%)\n"
                f"- Avan√ßado: {stats['models']['advanced']['count']} ({stats['models']['advanced']['percentage']}%)\n"
                f"- Premium: {stats['models']['premium']['count']} ({stats['models']['premium']['percentage']}%)\n\n"
                "EVA & GUARANI | Sistema Qu√¢ntico"
            )
            
            update.message.reply_text(self.add_signature(message))
            
            # Registra a intera√ß√£o
            self.memory.add_interaction(
                str(user.id),
                user.first_name,
                "/stats",
                message
            )
        except Exception as e:
            logger.error(f"Erro no comando /stats: {e}")
            update.message.reply_text(self.add_signature("Desculpe, ocorreu um erro ao processar o comando.")) 