
#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
EVA & GUARANI - Backup Qu√¢ntico Local
Vers√£o: 2.0.0 - Build 2025.02.26

Este m√≥dulo realiza backup completo do sistema localmente,
armazenando configura√ß√µes no MCP (Master Control Program) do cursor.
"""

import os
import sys
import json
import logging
import shutil
import datetime
import zipfile
from pathlib import Path
from typing import Dict, List, Any, Optional, Union

# Configura√ß√£o de logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler("logs/quantum_backup.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger("‚ú®quantum-backup‚ú®")

class QuantumBackup:
    """Sistema de backup qu√¢ntico com integra√ß√£o ao MCP do cursor."""
    
    def __init__(self):
        """Inicializa o sistema de backup."""
        self.timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        self.backup_dir = Path(f"backup/quantum/backup_{self.timestamp}")
        self.mcp_config_file = Path("cursor/mcp/config_storage.json")
        self.system_dirs = [
            "config", "src", "core", "modules", "scripts",
            "data", "logs", "models", "output",
            "infinity_ai", "ava_mind", "consciousness", "quantum_memory"
        ]
        
    def create_backup_structure(self) -> None:
        """Cria a estrutura de diret√≥rios para o backup."""
        logger.info(f"Criando estrutura de backup em {self.backup_dir}")
        
        # Cria diret√≥rio principal de backup
        self.backup_dir.mkdir(parents=True, exist_ok=True)
        
        # Cria diret√≥rio para o MCP
        mcp_dir = self.backup_dir / "mcp_cursor"
        mcp_dir.mkdir(exist_ok=True)
        
        # Cria diret√≥rios para cada componente do sistema
        for dir_name in self.system_dirs:
            (self.backup_dir / dir_name).mkdir(exist_ok=True)
            
        logger.info("Estrutura de backup criada com sucesso")
    
    def backup_system_files(self) -> None:
        """Realiza backup de todos os arquivos do sistema."""
        logger.info("Iniciando backup dos arquivos do sistema")
        
        for dir_name in self.system_dirs:
            source_dir = Path(dir_name)
            target_dir = self.backup_dir / dir_name
            
            if source_dir.exists():
                logger.info(f"Copiando arquivos de {source_dir} para {target_dir}")
                try:
                    if source_dir.is_dir():
                        shutil.copytree(source_dir, target_dir, dirs_exist_ok=True)
                    else:
                        shutil.copy2(source_dir, target_dir)
                except Exception as e:
                    logger.error(f"Erro ao copiar {source_dir}: {e}")
            else:
                logger.warning(f"Diret√≥rio {source_dir} n√£o encontrado, pulando")
    
    def collect_configurations(self) -> Dict[str, Any]:
        """Coleta todas as configura√ß√µes do sistema."""
        logger.info("Coletando configura√ß√µes do sistema")
        
        configs = {
            "timestamp": self.timestamp,
            "version": "2.0.0",
            "build": "2025.02.26",
            "system": {},
            "modules": {},
            "quantum": {},
            "security": {}
        }
        
        # Coleta configura√ß√µes do sistema
        try:
            if Path("config/system.json").exists():
                with open("config/system.json", "r", encoding="utf-8") as f:
                    configs["system"] = json.load(f)
        except Exception as e:
            logger.error(f"Erro ao ler configura√ß√µes do sistema: {e}")
        
        # Coleta configura√ß√µes dos m√≥dulos
        try:
            modules_dir = Path("modules")
            if modules_dir.exists():
                for module_config in modules_dir.glob("**/config.json"):
                    module_name = module_config.parent.name
                    with open(module_config, "r", encoding="utf-8") as f:
                        configs["modules"][module_name] = json.load(f)
        except Exception as e:
            logger.error(f"Erro ao ler configura√ß√µes dos m√≥dulos: {e}")
        
        # Coleta configura√ß√µes qu√¢nticas
        try:
            if Path("infinity_ai/quantum_config.json").exists():
                with open("infinity_ai/quantum_config.json", "r", encoding="utf-8") as f:
                    configs["quantum"] = json.load(f)
        except Exception as e:
            logger.error(f"Erro ao ler configura√ß√µes qu√¢nticas: {e}")
        
        return configs
    
    def store_in_mcp(self, configs: Dict[str, Any]) -> None:
        """Armazena as configura√ß√µes no MCP do cursor."""
        logger.info("Armazenando configura√ß√µes no MCP do cursor")
        
        # Cria diret√≥rio do MCP se n√£o existir
        self.mcp_config_file.parent.mkdir(parents=True, exist_ok=True)
        
        # Salva configura√ß√µes no MCP
        try:
            with open(self.mcp_config_file, "w", encoding="utf-8") as f:
                json.dump(configs, f, indent=2, ensure_ascii=False)
            logger.info(f"Configura√ß√µes armazenadas com sucesso em {self.mcp_config_file}")
            
            # Cria c√≥pia no diret√≥rio de backup
            backup_mcp_file = self.backup_dir / "mcp_cursor/config_storage.json"
            with open(backup_mcp_file, "w", encoding="utf-8") as f:
                json.dump(configs, f, indent=2, ensure_ascii=False)
        except Exception as e:
            logger.error(f"Erro ao armazenar configura√ß√µes no MCP: {e}")
    
    def create_compressed_backup(self) -> None:
        """Cria um arquivo comprimido do backup."""
        logger.info("Criando arquivo comprimido do backup")
        
        zip_file_path = f"backup/quantum_backup_{self.timestamp}.zip"
        try:
            with zipfile.ZipFile(zip_file_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
                for root, _, files in os.walk(self.backup_dir):
                    for file in files:
                        file_path = os.path.join(root, file)
                        arcname = os.path.relpath(file_path, self.backup_dir.parent)
                        zipf.write(file_path, arcname)
            
            logger.info(f"Backup comprimido criado com sucesso: {zip_file_path}")
        except Exception as e:
            logger.error(f"Erro ao criar arquivo comprimido: {e}")
    
    def generate_documentation(self) -> None:
        """Gera documenta√ß√£o do backup."""
        logger.info("Gerando documenta√ß√£o do backup")
        
        doc_content = f"""
# EVA & GUARANI - Documenta√ß√£o de Backup Qu√¢ntico

## Informa√ß√µes Gerais
- **Data e Hora**: {datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")}
- **Vers√£o do Sistema**: 2.0.0
- **Build**: 2025.02.26
- **ID do Backup**: {self.timestamp}

## Conte√∫do do Backup
- Arquivos do sistema
- Configura√ß√µes do sistema
- M√≥dulos e componentes
- Dados qu√¢nticos
- Configura√ß√µes do MCP do cursor

## Localiza√ß√£o
- Diret√≥rio principal: {self.backup_dir}
- Arquivo comprimido: backup/quantum_backup_{self.timestamp}.zip
- Configura√ß√µes MCP: {self.mcp_config_file}

## Componentes Inclu√≠dos
{chr(10).join([f"- {dir_name}" for dir_name in self.system_dirs])}

## Instru√ß√µes de Restaura√ß√£o
1. Descompacte o arquivo backup/quantum_backup_{self.timestamp}.zip
2. Copie os arquivos para seus respectivos diret√≥rios
3. Restaure as configura√ß√µes do MCP do cursor
4. Execute o script de verifica√ß√£o de integridade

## Observa√ß√µes
- Este backup cont√©m todas as configura√ß√µes e dados do sistema EVA & GUARANI
- As configura√ß√µes foram armazenadas no MCP do cursor para acesso r√°pido
- Recomenda-se manter este backup em local seguro
"""
        
        # Salva a documenta√ß√£o
        doc_file = self.backup_dir / "BACKUP_DOCUMENTATION.md"
        try:
            with open(doc_file, "w", encoding="utf-8") as f:
                f.write(doc_content)
            logger.info(f"Documenta√ß√£o gerada com sucesso: {doc_file}")
        except Exception as e:
            logger.error(f"Erro ao gerar documenta√ß√£o: {e}")
    
    def run_backup(self) -> None:
        """Executa o processo completo de backup."""
        logger.info("Iniciando processo de backup qu√¢ntico")
        
        try:
            # Cria estrutura de backup
            self.create_backup_structure()
            
            # Realiza backup dos arquivos
            self.backup_system_files()
            
            # Coleta configura√ß√µes
            configs = self.collect_configurations()
            
            # Armazena no MCP
            self.store_in_mcp(configs)
            
            # Cria arquivo comprimido
            self.create_compressed_backup()
            
            # Gera documenta√ß√£o
            self.generate_documentation()
            
            logger.info("Processo de backup conclu√≠do com sucesso")
            print(f"\n‚úÖ Backup qu√¢ntico conclu√≠do com sucesso!")
            print(f"üìÅ Localiza√ß√£o: {self.backup_dir}")
            print(f"üì¶ Arquivo ZIP: backup/quantum_backup_{self.timestamp}.zip")
            print(f"‚öôÔ∏è Configura√ß√µes MCP: {self.mcp_config_file}")
            
        except Exception as e:
            logger.error(f"Erro durante o processo de backup: {e}")
            print(f"\n‚ùå Erro durante o backup: {e}")

if __name__ == "__main__":
    print("\nüîÑ Iniciando backup qu√¢ntico do sistema EVA & GUARANI...")
    backup = QuantumBackup()
    backup.run_backup()
