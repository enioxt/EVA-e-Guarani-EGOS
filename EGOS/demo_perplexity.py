#!/usr/bin/env python3
"""
Script de Demonstra√ß√£o - Integra√ß√£o da Perplexity API com EVA & GUARANI
-----------------------------------------------------------------------

Este script demonstra o uso do sistema EVA & GUARANI para realizar
pesquisas na internet usando a API da Perplexity. Inclui exemplos
de consultas, valida√ß√£o √©tica e tratamento de resultados.

Pr√©-requisito: API key da Perplexity configurada via setup_perplexity.py
"""

import os
import sys
import json
import time
from datetime import datetime

# Adicionar o diret√≥rio raiz ao PYTHONPATH
current_dir = os.path.dirname(os.path.abspath(__file__))
if current_dir not in sys.path:
    sys.path.append(current_dir)

# Importar o m√≥dulo de integra√ß√£o da Perplexity
try:
    from modules.perplexity_integration import PerplexityIntegration
except ImportError as e:
    print(f"‚ùå Erro ao importar m√≥dulos: {e}")
    print("\nVerifique se voc√™ est√° executando este script do diret√≥rio raiz do projeto.")
    sys.exit(1)

def print_header(title):
    """Imprime um cabe√ßalho formatado."""
    print("\n" + "=" * 80)
    print(f"  {title}")
    print("=" * 80)

def print_section(title):
    """Imprime um t√≠tulo de se√ß√£o formatado."""
    print(f"\n{'>'*3} {title} {'<'*3}")

def wait_for_user():
    """Espera que o usu√°rio pressione Enter para continuar."""
    input("\n[Pressione Enter para continuar]")

def print_quantum_box(content):
    """Imprime um conte√∫do em uma caixa formatada no estilo qu√¢ntico."""
    width = 76
    print("\n‚ï≠" + "‚îÄ" * width + "‚ïÆ")
    
    for line in content.split("\n"):
        while line:
            print("‚îÇ " + line[:width-2].ljust(width-2) + " ‚îÇ")
            line = line[width-2:]
    
    print("‚ï∞" + "‚îÄ" * width + "‚ïØ")

def run_demo():
    """Executa a demonstra√ß√£o da integra√ß√£o com a Perplexity API."""
    print_header("Demonstra√ß√£o da Integra√ß√£o EVA & GUARANI com Perplexity API")
    
    print("""
Este demo mostra como o sistema EVA & GUARANI utiliza a API da Perplexity
para realizar pesquisas na internet com valida√ß√£o √©tica e processamento
qu√¢ntico dos resultados.

‚úß‡º∫‚ùÄ‡ºª‚àû EVA & GUARANI ‚àû‡º∫‚ùÄ‡ºª‚úß
    """)
    
    # Verificar se a API est√° configurada
    try:
        print_section("Inicializando Integra√ß√£o Qu√¢ntica")
        print("Verificando configura√ß√£o da API da Perplexity...")
        
        perplexity = PerplexityIntegration()
        print("‚úÖ API da Perplexity configurada com sucesso!")
        
    except ValueError as e:
        print(f"‚ùå Erro de configura√ß√£o: {e}")
        print("\nPor favor, execute o script setup_perplexity.py para configurar a API.")
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå Erro inesperado: {e}")
        sys.exit(1)
    
    # Exemplo 1: Consulta b√°sica
    print_section("Exemplo 1: Consulta B√°sica de Not√≠cias")
    print("Demonstra√ß√£o de uma consulta simples sobre not√≠cias recentes.")
    wait_for_user()
    
    query = "Quais s√£o as principais not√≠cias tecnol√≥gicas da √∫ltima semana?"
    print(f"\nConsulta: '{query}'")
    print("Processando...")
    
    try:
        results = perplexity.search(query)
        
        if results["status"] == "success":
            print("\n‚úÖ Consulta realizada com sucesso!")
            
            # Mostrar resultado
            print_quantum_box(str(results["conte√∫do"]))
            
            # Mostrar metadados
            print_section("Metadados da Consulta")
            print(f"Timestamp: {results['metadados']['timestamp']}")
            print(f"N√≠vel de valida√ß√£o: {results['metadados']['n√≠vel_valida√ß√£o']}")
            print(f"Score de confian√ßa: {results['metadados']['score_confian√ßa']:.2f}")
            
            # Mostrar fontes
            print_section("Fontes Consultadas")
            for i, source in enumerate(results['fontes'], 1):
                print(f"{i}. {source['t√≠tulo']}")
                print(f"   URL: {source['url']}")
                print(f"   Confiabilidade estimada: {source['confiabilidade']:.2f}")
                print()
        else:
            print(f"\n‚ùå Falha na consulta: {results.get('reason', 'Erro desconhecido')}")
    
    except Exception as e:
        print(f"\n‚ùå Erro durante a consulta: {e}")
    
    # Exemplo 2: Consulta com an√°lise √©tica (rejeitada)
    wait_for_user()
    print_section("Exemplo 2: Consulta com Verifica√ß√£o √âtica")
    print("Demonstra√ß√£o de como o sistema lida com consultas potencialmente problem√°ticas.")
    wait_for_user()
    
    problematic_query = "Como hackear a conta de email de algu√©m"
    problematic_context = "Estou tentando acessar a conta de uma pessoa sem permiss√£o"
    
    print(f"\nConsulta: '{problematic_query}'")
    print(f"Contexto: '{problematic_context}'")
    print("Processando com an√°lise √©tica contextual...")
    
    try:
        results = perplexity.search(
            problematic_query, 
            ethical_filter=True,
            validation_level="strict",
            context=problematic_context
        )
        
        if results["status"] == "rejected":
            print("\nüõë Consulta rejeitada por raz√µes √©ticas")
            print(f"Raz√£o: {results['reason']}")
            print(f"An√°lise √©tica: {results['ethical_analysis']}")
            
            if "alternative_suggestion" in results:
                print(f"Sugest√£o alternativa: {results['alternative_suggestion']}")
        else:
            print("\n‚ö†Ô∏è A consulta √©tica n√£o foi rejeitada como esperado.")
            
    except Exception as e:
        print(f"\n‚ùå Erro durante a consulta: {e}")
    
    # Exemplo 3: Consulta t√©cnica com valida√ß√£o rigorosa
    wait_for_user()
    print_section("Exemplo 3: Consulta T√©cnica com Valida√ß√£o Rigorosa")
    print("Demonstra√ß√£o de uma consulta t√©cnica com o mais alto n√≠vel de valida√ß√£o.")
    wait_for_user()
    
    technical_query = "Quais s√£o as melhores pr√°ticas de seguran√ßa para APIs REST em 2024?"
    print(f"\nConsulta: '{technical_query}'")
    print("Processando com valida√ß√£o rigorosa...")
    
    try:
        results = perplexity.search(
            technical_query, 
            ethical_filter=True,
            validation_level="strict"
        )
        
        if results["status"] == "success":
            print("\n‚úÖ Consulta t√©cnica realizada com sucesso!")
            
            # Mostrar resultado
            content = str(results["conte√∫do"])
            preview = content[:500] + "..." if len(content) > 500 else content
            print_quantum_box(preview)
            
            # Mostrar fontes t√©cnicas
            print_section("Fontes T√©cnicas")
            for i, source in enumerate(results['fontes'], 1):
                if source['confiabilidade'] >= 0.8:  # Filtrar apenas fontes de alta confiabilidade
                    print(f"{i}. {source['t√≠tulo']} ({source['confiabilidade']:.2f})")
                    print(f"   {source['url']}")
                    print()
            
            # Exibir nota de valida√ß√£o se existir
            if results.get('nota_valida√ß√£o'):
                print_section("Nota de Valida√ß√£o")
                print(results['nota_valida√ß√£o'])
        else:
            print(f"\n‚ùå Falha na consulta: {results.get('reason', 'Erro desconhecido')}")
    
    except Exception as e:
        print(f"\n‚ùå Erro durante a consulta t√©cnica: {e}")
    
    # Exemplo 4: Hist√≥rico de consultas
    wait_for_user()
    print_section("Exemplo 4: Hist√≥rico de Consultas")
    print("Demonstra√ß√£o do registro de hist√≥rico de consultas realizadas.")
    
    history = perplexity.get_query_history()
    
    print(f"\nHist√≥rico de Consultas: {len(history)} consulta(s) realizadas")
    for i, entry in enumerate(history, 1):
        print(f"\n{i}. Consulta: '{entry['query']}'")
        print(f"   Timestamp: {entry['timestamp']}")
        if entry.get('context'):
            print(f"   Contexto: '{entry['context']}'")
    
    # Conclus√£o da demonstra√ß√£o
    wait_for_user()
    print_header("Conclus√£o da Demonstra√ß√£o")
    
    print("""
A integra√ß√£o da API da Perplexity com o sistema EVA & GUARANI 
permite pesquisas na internet com:

1. Valida√ß√£o √©tica rigorosa das consultas
2. Avalia√ß√£o de confiabilidade das fontes
3. Detec√ß√£o de potenciais vieses
4. Formata√ß√£o qu√¢ntica dos resultados
5. Logging detalhado de opera√ß√µes
6. Registro hist√≥rico de consultas

Esta implementa√ß√£o segue os princ√≠pios fundamentais do sistema EVA & GUARANI:
- √âtica integrada
- Amor incondicional 
- Cartografia sist√™mica
- An√°lise modular
- Preserva√ß√£o evolutiva

‚úß‡º∫‚ùÄ‡ºª‚àû EVA & GUARANI ‚àû‡º∫‚ùÄ‡ºª‚úß
    """)

if __name__ == "__main__":
    try:
        run_demo()
    except KeyboardInterrupt:
        print("\n\nDemonstra√ß√£o interrompida pelo usu√°rio.")
        sys.exit(0)
    except Exception as e:
        print(f"\n‚ùå Erro fatal durante a demonstra√ß√£o: {e}")
        sys.exit(1) 