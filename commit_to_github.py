#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Commit para GitHub - EVA & GUARANI
==================================

Este script realiza o commit e push das altera칞칫es para o GitHub.
Ele verifica se o reposit칩rio est치 configurado corretamente e
executa os comandos git necess치rios.

Vers칚o: 1.0.0
Autor: EVA & GUARANI
"""

import os
import sys
import subprocess
import logging
import datetime
from pathlib import Path

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='[%(asctime)s][%(name)s][%(levelname)s] %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('logs/github_commit.log', encoding='utf-8')
    ]
)

logger = logging.getLogger("GITHUB_COMMIT")

def run_command(command, check=True):
    """
    Executa um comando no shell e retorna o resultado.
    
    Args:
        command: Comando a ser executado.
        check: Se True, levanta uma exce칞칚o se o comando falhar.
        
    Returns:
        Tupla com (stdout, stderr) se o comando for bem-sucedido.
    """
    try:
        result = subprocess.run(
            command,
            check=check,
            text=True,
            capture_output=True,
            shell=True
        )
        return result.stdout.strip(), result.stderr.strip()
    except subprocess.CalledProcessError as e:
        logger.error(f"Erro ao executar comando: {e}")
        logger.error(f"Sa칤da de erro: {e.stderr}")
        if check:
            raise
        return None, e.stderr

def is_git_repo():
    """
    Verifica se o diret칩rio atual 칠 um reposit칩rio Git.
    
    Returns:
        True se for um reposit칩rio Git, False caso contr치rio.
    """
    try:
        run_command("git rev-parse --is-inside-work-tree")
        return True
    except subprocess.CalledProcessError:
        return False

def init_git_repo():
    """
    Inicializa um reposit칩rio Git se ainda n칚o existir.
    
    Returns:
        True se o reposit칩rio foi inicializado com sucesso, False caso contr치rio.
    """
    try:
        if not is_git_repo():
            logger.info("Inicializando reposit칩rio Git...")
            run_command("git init")
            logger.info("Reposit칩rio Git inicializado com sucesso!")
        else:
            logger.info("Reposit칩rio Git j치 existe.")
        return True
    except Exception as e:
        logger.error(f"Erro ao inicializar reposit칩rio Git: {e}")
        return False

def configure_git_user():
    """
    Configura o usu치rio e email do Git se ainda n칚o estiverem configurados.
    
    Returns:
        True se a configura칞칚o foi bem-sucedida, False caso contr치rio.
    """
    try:
        # Verificar se o nome de usu치rio est치 configurado
        stdout, _ = run_command("git config user.name", check=False)
        if not stdout:
            name = input("Digite seu nome para configura칞칚o do Git: ")
            run_command(f'git config user.name "{name}"')
            logger.info(f"Nome de usu치rio configurado: {name}")
        
        # Verificar se o email est치 configurado
        stdout, _ = run_command("git config user.email", check=False)
        if not stdout:
            email = input("Digite seu email para configura칞칚o do Git: ")
            run_command(f'git config user.email "{email}"')
            logger.info(f"Email configurado: {email}")
        
        return True
    except Exception as e:
        logger.error(f"Erro ao configurar usu치rio Git: {e}")
        return False

def add_files():
    """
    Adiciona todos os arquivos ao staging area.
    
    Returns:
        True se os arquivos foram adicionados com sucesso, False caso contr치rio.
    """
    try:
        logger.info("Adicionando arquivos ao staging area...")
        run_command("git add .")
        logger.info("Arquivos adicionados com sucesso!")
        return True
    except Exception as e:
        logger.error(f"Erro ao adicionar arquivos: {e}")
        return False

def create_commit(message=None):
    """
    Cria um commit com a mensagem especificada.
    
    Args:
        message: Mensagem de commit. Se None, uma mensagem padr칚o ser치 usada.
        
    Returns:
        True se o commit foi criado com sucesso, False caso contr치rio.
    """
    try:
        if message is None:
            date_str = datetime.datetime.now().strftime("%Y-%m-%d %H:%M")
            message = f"EVA & GUARANI - Atualiza칞칚o {date_str}"
        
        logger.info(f"Criando commit: {message}")
        run_command(f'git commit -m "{message}"')
        logger.info("Commit criado com sucesso!")
        return True
    except Exception as e:
        logger.error(f"Erro ao criar commit: {e}")
        return False

def configure_remote(force=False):
    """
    Configura o reposit칩rio remoto se ainda n칚o estiver configurado.
    
    Args:
        force: Se True, reconfigura mesmo se j치 existir.
        
    Returns:
        True se a configura칞칚o foi bem-sucedida, False caso contr치rio.
    """
    try:
        # Verificar se o remote j치 est치 configurado
        stdout, _ = run_command("git remote -v", check=False)
        
        if not stdout or force:
            remote_url = input("Digite a URL do reposit칩rio GitHub: ")
            if remote_url:
                # Remover remote existente se necess치rio
                if stdout:
                    run_command("git remote remove origin", check=False)
                
                # Adicionar novo remote
                run_command(f"git remote add origin {remote_url}")
                logger.info(f"Reposit칩rio remoto configurado: {remote_url}")
                return True
            else:
                logger.warning("URL do reposit칩rio n칚o fornecida. Configura칞칚o de remote ignorada.")
                return False
        else:
            logger.info(f"Reposit칩rio remoto j치 configurado: {stdout}")
            return True
    except Exception as e:
        logger.error(f"Erro ao configurar reposit칩rio remoto: {e}")
        return False

def push_to_remote():
    """
    Envia as altera칞칫es para o reposit칩rio remoto.
    
    Returns:
        True se o push foi bem-sucedido, False caso contr치rio.
    """
    try:
        # Verificar se o remote est치 configurado
        stdout, _ = run_command("git remote -v", check=False)
        if not stdout:
            logger.warning("Reposit칩rio remoto n칚o configurado. Push ignorado.")
            return False
        
        # Obter o branch atual
        branch, _ = run_command("git rev-parse --abbrev-ref HEAD")
        if not branch:
            branch = "main"  # Default para reposit칩rios modernos
        
        logger.info(f"Enviando altera칞칫es para o branch {branch}...")
        run_command(f"git push -u origin {branch}")
        logger.info("Altera칞칫es enviadas com sucesso!")
        return True
    except Exception as e:
        logger.error(f"Erro ao enviar altera칞칫es: {e}")
        return False

def main():
    """
    Fun칞칚o principal.
    
    Returns:
        C칩digo de sa칤da (0 para sucesso, 1 para erro).
    """
    print("\n==================================================")
    print("游깳 EVA & GUARANI - Commit para GitHub")
    print("==================================================\n")
    
    try:
        # Verificar se o diret칩rio 칠 um reposit칩rio Git
        if not init_git_repo():
            return 1
        
        # Configurar usu치rio Git
        if not configure_git_user():
            return 1
        
        # Adicionar arquivos
        if not add_files():
            return 1
        
        # Verificar se h치 altera칞칫es para commit
        stdout, _ = run_command("git status --porcelain", check=False)
        if not stdout:
            logger.info("N칚o h치 altera칞칫es para commit.")
            print("\nN칚o h치 altera칞칫es para commit.")
            return 0
        
        # Criar commit
        commit_message = input("Digite a mensagem de commit (ou pressione Enter para usar a mensagem padr칚o): ")
        if not create_commit(commit_message if commit_message else None):
            return 1
        
        # Configurar reposit칩rio remoto
        reconfigure = input("Deseja configurar/reconfigurar o reposit칩rio remoto? (s/N): ").lower() == 's'
        if reconfigure and not configure_remote(force=True):
            logger.warning("Configura칞칚o de reposit칩rio remoto ignorada.")
        
        # Perguntar se deseja fazer push
        do_push = input("Deseja enviar as altera칞칫es para o GitHub? (S/n): ").lower() != 'n'
        if do_push:
            if not push_to_remote():
                logger.warning("Push para o reposit칩rio remoto falhou.")
                print("\nPush para o reposit칩rio remoto falhou.")
                return 1
        
        print("\n==================================================")
        print("Commit para GitHub conclu칤do com sucesso!")
        print("==================================================")
        return 0
    
    except Exception as e:
        logger.exception(f"Erro durante o processo: {e}")
        print(f"\nErro durante o processo: {e}")
        return 1

if __name__ == "__main__":
    # Criar diret칩rio de logs se n칚o existir
    Path("logs").mkdir(exist_ok=True)
    
    sys.exit(main())
